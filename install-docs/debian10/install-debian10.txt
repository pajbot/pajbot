# This was tested and written on a Debian 9.6.0 installation.
# We will be installing a pajbot1 instance for a channel called "KKonaTestBroadcaster" (display name),
# with the twitch login name "kkonatestbroadcaster" (lowercase)
# In this example, your own account is "KKonaTestAdmin" (login name "kkonatestadmin")
# The bot will run on the account "KKonaTestBot" (login name "kkonatestbot")
# We will be having access to the bot additionally from a so-called "control hub" (this is a place you
# join all your pajbot1 instances to if you have multiple, so you can execute commands on all of them at once)
# For this control hub, we will be using the account "KKonaTestHub" (login name "kkonatesthub")
# The distinction between display name and login name is made intentionally, since some places
# require the lowercase login-name, other places are fine with the capitalized display name.
# During the whole installation documentation, attention has been given to use the lowerase/mixed-case
# username where each of them should be used.

sudo apt update

#
# Install Guest Additions, if on VirtualBox
#
sudo apt install linux-headers-$(uname -r) build-essential
# Insert Guest Additions CD via device menu:
sudo mount /dev/sr0 /media/cdrom0
cd /media/cdrom0
sudo bash VBoxLinuxAdditions.run
sudo reboot	

#
# Install git
#
sudo apt install git

#
# Register a twitch application
#
# Make sure you are logged into twitch with your own account (e.g. KKonaTestAdmin),
# go to https://dev.twitch.tv/console/apps/create and register a new application:
#
# Name: KKonaTestBot - KKonaTestBroadcaster
# OAuth Redirect URL: https://bot.kkonatestbroadcaster.tv/login/authorized
# Category: Chat Bot
#
# In this example, the client ID will be: 0f958ce6bf20ba8ea84a21e43ebba1
# The client secret will be: cdaa2b0832ccd5b1f053f2faffc37f
#

#
# Install python3 and dependencies for pip packages
#
sudo apt install libssl-dev libpq-dev python3 python3-pip python3-venv

#
# download pajbot code and dependencies
#
cd
git clone https://github.com/pajlada/pajbot.git
cd pajbot
# create virtual environment "venv"
./scripts/venvinstall.sh
source venv/bin/activate

#
# create pajbot system user
#
sudo adduser --system --group pajbot --home /opt/pajbot

#
# install redis and postgresql for pajbot1
#
sudo apt install postgresql redis-server
sudo -u postgres psql
# > CREATE USER pajbot;
# > CREATE DATABASE pajbot OWNER pajbot;

sudo -u pajbot psql pajbot
# > CREATE SCHEMA pajbot1_kkonatestbroadcaster;

#
# create your domain
# pajbot1 needs a functional website. Usage of SSL is strongly recommended.
# In the following, we will set up our domain with CloudFlare as the DNS provider,
# and then use a certificate authority called LetsEncrypt to get an SSL certificate
# for our bot's domain (kkonatestbroadcaster.tv).
#
# First, register your domain with any registrar. Once you are registered, register/log in on
# cloudflare.com and add your domain as a new free site. Once cloudflare is done scanning
# all the details about your site, follow the instructions about the DNS servers
# to change to at your registrar (you will be given two ***.ns.cloudflare.com servers
# to set at your registrar).
#
# At CloudFlare, delete *all* DNS records, and add the following new records:
# (1) Type A, Name "@" (when submitting, it will show "kkonatestbroadcaster.tv" instead of "@", this is normal),
#     Value <IPv4 address of your server>, Automatic TTL, grey cloud (do not proxy through CloudFlare)
# (2) Type AAAA, Name "@", Value <IPv6 address of your server>, Automatic TTL, grey cloud
# (3) Type CNAME, Name "bot", Value "kkonatestbroadcaster.tv", Automatic TTC, grey cloud
# (3) Type CNAME, Name "www", Value "kkonatestbroadcaster.tv", Automatic TTC, grey cloud
# (4) Type CAA, Name "@", Value: Tag: "Only allow specific hostnames", Value: "letsencrypt.org", Automatic TTL.
# (4) Type CAA, Name "@", Value: Tag: "Only allow wildcards", Value: "letsencrypt.org", Automatic TTL.
# (4) Type CAA, Name "@", Value: Tag: "Send violation reports to", Value: "mailto:your.email@provider.com", Automatic TTL.
#
# Also while you are logged in with CloudFlare, click on your Account -> My Profile in the top right,
# at the bottom, under API keys, click on "View" for the "Global API Key". Note the value down (but somewhere safe).
#
# On the server run:
sudo apt install nginx-extras
sudo apt install certbot python3-certbot-dns-cloudflare

# you must now put your CloudFlare credentials in a file for certbot to look into:
sudo mkdir -p /etc/letsencrypt/secrets
sudo nano /etc/letsencrypt/secrets/cloudflare.ini
sudo chmod 600 /etc/letsencrypt/secrets/cloudflare.ini
# Put these contents inside (use the token you copied from CloudFlare earlier + your CloudFlare login email):
# also see these docs: https://certbot-dns-cloudflare.readthedocs.io/en/stable/
#
# ># Cloudflare API credentials used by Certbot
# >dns_cloudflare_email = cloudflare@example.com
# >dns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234567
#
# Then get your certificate like this:
sudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/secrets/cloudflare.ini -d "kkonatestbroadcaster.tv" -d "*.kkonatestbroadcaster.tv" --rsa-key-size 4096 --server "https://acme-v02.api.letsencrypt.org/directory" --post-hook "systemctl reload nginx"
# Enter an email for security notices, agree to the terms of service, but you do not need to agree
# to be signed up to the EFF newsletter.



#
# Configure nginx
#
# the following command will take a long to very long time
sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096
sudo rm /etc/nginx/sites-{available,enabled}/default
sudo rm /etc/nginx/nginx.conf
sudo nano /etc/nginx/nginx.conf # put the contents of the example nginx.conf inside
sudo nano /etc/nginx/sites-available/https-redirect # and so on...
sudo nano /etc/nginx/sites-available/bot.kkonatestbroadcaster.tv
sudo mkdir /etc/nginx/defaults-{available,enabled}
sudo nano /etc/nginx/defaults-available/default-server
sudo ln -s /etc/nginx/sites-available/* /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/defaults-available/* /etc/nginx/defaults-enabled/
# test nginx syntax
sudo nginx -t
sudo systemctl restart nginx

#
# Configure pajbot
#
cd ~/pajbot
mkdir configs
nano configs/kkonatestbroadcaster.ini
# put your adjusted config.ini in there
sudo cp -r ~/pajbot /opt/pajbot
cd /opt/pajbot
rm -r ~/pajbot

#
# Set up pajbot and pajbot-web services
#
sudo mkdir /srv/pajbot
sudo chown pajbot:pajbot /srv/pajbot
sudo chown -R pajbot:pajbot /opt/pajbot
sudo nano /etc/systemd/system/pajbot@.service # copy provided file into there
sudo nano /etc/systemd/system/pajbot-web@.service # copy provided file into there
sudo systemctl daemon-reload
sudo systemctl enable pajbot@kkonatestbroadcaster
sudo systemctl enable pajbot-web@kkonatestbroadcaster
sudo systemctl start pajbot@kkonatestbroadcaster
sudo systemctl start pajbot-web@kkonatestbroadcaster

#
# Authenticate your bot
#
# - Go to https://bot.kkonatestbroadcaster.tv/bot_login
# - Log in with your bot account (the same as set up in your config file)
# Your bot should now come online in chat.

#
# Set up your channels
#
In KKonaTestBroadcaster:
- /mod KKonaTestAdmin
- /mod KKonaTestBot

In KKonaTestHub:
- /subscribers
- /mod KKonaTestBot
- /mod KKonaTestAdmin

In KKonaTestBot
- /subscribers
- /mod KKonaTestBot
- /mod KKonaTestAdmin

#
# Some helpful commands to set you up:
#
# Create various basic commands like !ping, !uptime or !points:
!eval bot.eval_from_file(event, 'https://raw.githubusercontent.com/pajbot/pajbot/master/install-docs/debian10/basic-commands.txt')

# Give other users higher levels:
!level DankHelperUsername 250
!level ModeratorUsername 500
!level SuperModeratorOrBroadcaster 1000
!level AdminUsername 1500

# If your streamer has a twitter account:
!twitterfollow twitterusername
!add command whereisstreamer @$(source:username_raw), Latest tweet by KKonaTestBroadcaster: $(lasttweet:twitterusername)

# Also be sure to login into the admin panel under https://bot.kkonatestbroadcaster.tv
# login at the bottom, afterwards click "Admin Panel" at the bottom
# and explore the options available :)
